name: Docker Build and Push

on:
  workflow_dispatch:
  push:
    branches: [ main, cinema ]
    paths:
      - 'src/**'
      - '.github/workflows/docker-build-push.yml'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  MONOLITH_IMAGE_NAME: ${{ github.repository }}/monolith
  MOVIES_SERVICE_IMAGE_NAME: ${{ github.repository }}/movies-service
  EVENTS_SERVICE_IMAGE_NAME: ${{ github.repository }}/events-service
  PROXY_SERVICE_IMAGE_NAME: ${{ github.repository }}/proxy-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Monolith
      - name: Extract metadata (tags, labels) for Monolith
        id: meta-monolith
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.MONOLITH_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Monolith Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/monolith
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-monolith.outputs.tags }}
          labels: ${{ steps.meta-monolith.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Movies Service
      - name: Extract metadata (tags, labels) for Movies Service
        id: meta-movies
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.MOVIES_SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Movies Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/movies
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-movies.outputs.tags }}
          labels: ${{ steps.meta-movies.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Events Service
      - name: Extract metadata (tags, labels) for Events Service
        id: meta-events
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.EVENTS_SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Events Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/events
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-events.outputs.tags }}
          labels: ${{ steps.meta-events.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Proxy Service
      - name: Extract metadata (tags, labels) for Proxy Service
        id: meta-proxy
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROXY_SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Proxy Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/proxy
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-proxy.outputs.tags }}
          labels: ${{ steps.meta-proxy.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-services:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose with built images
        run: |
          # Update docker-compose.yml to use the newly built images
          sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ github.repository }}/monolith:latest\n    #build:|g" docker-compose.yml
          sed -i "s|context: ./src/monolith|#context: ./src/monolith|g" docker-compose.yml
          sed -i "s|dockerfile: Dockerfile|#dockerfile: Dockerfile|g" docker-compose.yml

          # Update for all services
          for service in movies-service events-service proxy-service; do
            sed -i "s|build:.*$service|image: ${{ env.REGISTRY }}/${{ github.repository }}/$service:latest|g" docker-compose.yml
          done

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          docker compose ps

      - name: Check service health
        run: |
          # Check if services are healthy
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8081/api/movies/health || exit 1
          curl -f http://localhost:8082/api/events/health || exit 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: tests/postman/package-lock.json

      - name: Install Newman and dependencies
        working-directory: tests/postman
        run: npm install

      - name: Run API tests
        working-directory: tests/postman
        run: |
          # Run tests against local services
          npm run test:local

          # Check test results
          if [ $? -ne 0 ]; then
            echo "API tests failed!"
            exit 1
          fi

          echo "All API tests passed successfully!"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: tests/postman/newman/

      - name: Stop services
        if: always()
        run: docker compose down -v
